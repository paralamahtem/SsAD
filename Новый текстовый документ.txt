1)
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class TestCoffee {
    private static List<Coffee> truck; 

    public static void main(String[] args) {
        truck = new ArrayList<>(); 
        fillTruck(truck);

        // сортировка по дальности полета
        coffeeComparator = new Comparator<Coffee>() {
            @Override
            public  compare(Coffee o1, Coffee o2) {
                return Integer.compare(o2.getPrice(), o1.getPrice()) * (-1);
            };
            
            // сортировка по типу самолета
            Comparator<Airline> airlineComparator1 = new Comparator<Airline>() {
            @Override
            public int compare(Airline o1, Airline o2) {
            //return (o2.getType()).compareTo(o1.getType());
            if ((o2.getType() == AirlineType.CARGO) && (o1.getType() == AirlineType.PASSENGER)) {
            return -1;
            } else if ((o1.getType() == AirlineType.CARGO) && (o2.getType() == AirlineType.PASSENGER)) {
            return 1;
            } else if ((o1.getType() == AirlineType.CARGO) && (o2.getType() == AirlineType.CARGO)) {
            return 0;
            } else {
            return 0;
            }
            }
            };
            
            Collections.shuffle(company);
            for (Coffee f1 : company) {
            System.out.println(fl);
        }
            Collections.sort(company, coffeeComparator);
            System.out.println();
            for (Coffee fl : company) {
            System.out.println(fl);
        }
            Collections.sort(company, airlineComparator1);
            System.out.println();
            for (Airline al : company) {
            System.out.println(al);
            }
        };

     private static void fillTruck(List<Coffee> truck) {
        truck.add(new GrainCoffee("Jacobs", "Arabica", 250, 750));
        truck.add(new GrainCoffee("Nescafe", "Robusta", 150, 600));
        truck.add(new GrainCoffee("Jardin", "Arabica", (float) 125.5, 1200));
        truck.add(new GroundCoffee("Jardin", "Medium", 300, 3000));
        truck.add(new GroundCoffee("Nescafe", "Fine", 575, 5000));
        truck.add(new SolubleCoffee("Carraro", "Powder", 300, 2575));
        truck.add(new SolubleCoffee("Jacobs", "Granular", 500, (float) 4380.5));
        }
    }
}



2)
public class GrainCoffee extends Coffee {
   private String variety;
    private CoffeeType type;

    public GrainCoffee(String brand,String variety, float mass, float price) {
        this.variety = variety;
        this.type = CoffeeType.GRAIN;
        super.setBrand(brand);
        super.setMass(mass);
        super.setPrice(price);
    }

    @Override
    public String toString() {
        return "GrainCoffee { " +
                "mass=" + super.getMass() +
                ", price=" + super.getPrice() +
                ", variety=" + variety +
                ", type=" + type +
                " }";
    }
}



3)
public class GroundCoffee extends Coffee {
    private String grinding;
    private CoffeeType type;

    public GroundCoffee(String brand, String milling, float mass, float price) {
        this.grinding = grinding;
        this.type = CoffeeType.GROUND;
        super.setBrand(brand);
        super.setMass(mass);
        super.setPrice(price);
    }

    @Override
    public String toString() {
        return "GroundCoffee { " +
                "mass=" + super.getMass() +
                ", price=" + super.getPrice() +
                ", grinding=" + grinding +
                ", type=" + type +
                " }";
    }

}



4)
public class SolubleCoffee extends Coffee {
    private String form;
    private CoffeeType type;

    public SolubleCoffee(String brand, String form, float mass, float price) {
        this.form= form;
        this.type = CoffeeType.SOLUBLE;
        super.setBrand(brand);
        super.setMass(mass);
        super.setPrice(price);
    }

    @Override
    public String toString() {
        return "SolubleCoffee { " +
                "mass=" + super.getMass() +
                ", price=" + super.getPrice() +
                ", form=" + form +
                ", type=" + type +
                " }";
    }

}